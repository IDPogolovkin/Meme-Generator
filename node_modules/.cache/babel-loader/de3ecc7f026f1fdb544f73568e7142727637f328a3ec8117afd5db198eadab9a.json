{"ast":null,"code":"var _jsxFileName = \"/Users/daniilpogolovkin/Desktop/FreeCodeCampREACT/meme-generator/meme/src/components/Form.jsx\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport '../App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Form = props => {\n  _s();\n  React.useEffect(() => {\n    async function getMemes() {\n      const res = await fetch('https://api.imgflip.com/get_memes');\n      const data = await res.json();\n      setAllMemeImages(data.data.memes);\n    }\n    fetch('https://api.imgflip.com/get_memes').then(res => res.json()).then(data => setAllMemeImages(data.data.memes));\n  }, []);\n  const [meme, setMeme] = React.useState({\n    topText: \"\",\n    bottomText: \"\",\n    randomImage: \"http://i.imgflip.com/1bij.jpg\"\n  });\n  const [allMemeImages, setAllMemeImages] = React.useState([]);\n  function getMemeImage() {\n    const memesArray = allMemeImages;\n    const randomNumber = Math.floor(Math.random() * memesArray.length);\n    const url = memesArray[randomNumber].url;\n    setMeme(prevMeme => ({\n      ...prevMeme,\n      randomImage: url\n    }));\n  }\n  function handleChange(event) {\n    const {\n      name,\n      value\n    } = event.target;\n    setMeme(prevMeme => ({\n      ...prevMeme,\n      [name]: value\n    }));\n  }\n  return /*#__PURE__*/_jsxDEV(\"main\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Top text\",\n        className: \"form--input\",\n        name: \"topText\",\n        value: meme.topText,\n        onChange: handleChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Bottom text\",\n        className: \"form--input\",\n        name: \"bottomText\",\n        value: meme.bottomText,\n        onChange: handleChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"form--button\",\n        onClick: getMemeImage,\n        children: \"Get a new meme image \\uD83D\\uDDBC\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"meme\",\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        src: meme.randomImage,\n        className: \"meme--image\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"meme--text top\",\n        children: meme.topText\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"meme--text bottom\",\n        children: meme.bottomText\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 5\n  }, this);\n};\n_s(Form, \"e/Xc54QZAybrgoCk1uQkn4h8eyw=\");\n_c = Form;\nexport default Form;\nvar _c;\n$RefreshReg$(_c, \"Form\");","map":{"version":3,"names":["React","Form","props","useEffect","getMemes","res","fetch","data","json","setAllMemeImages","memes","then","meme","setMeme","useState","topText","bottomText","randomImage","allMemeImages","getMemeImage","memesArray","randomNumber","Math","floor","random","length","url","prevMeme","handleChange","event","name","value","target"],"sources":["/Users/daniilpogolovkin/Desktop/FreeCodeCampREACT/meme-generator/meme/src/components/Form.jsx"],"sourcesContent":["import React from 'react'\nimport '../App.css'\n\nconst Form = (props) => {\n\n    React.useEffect(()=>{\n        async function getMemes(){\n            const res = await fetch('https://api.imgflip.com/get_memes')\n            const data = await res.json()\n            setAllMemeImages(data.data.memes)\n        }\n        fetch('https://api.imgflip.com/get_memes')\n        .then(res => res.json())\n        .then(data => setAllMemeImages(data.data.memes))\n    }, [])\n\n    const [meme, setMeme] = React.useState({\n        topText: \"\",\n        bottomText: \"\",\n        randomImage: \"http://i.imgflip.com/1bij.jpg\" \n    })\n    const [allMemeImages, setAllMemeImages] = React.useState([])\n    \n    \n    function getMemeImage() {\n        const memesArray = allMemeImages\n        const randomNumber = Math.floor(Math.random() * memesArray.length)\n        const url = memesArray[randomNumber].url\n        setMeme(prevMeme => ({\n            ...prevMeme,\n            randomImage: url\n        }))\n        \n    }\n\n    function handleChange(event) {\n        const {name, value} = event.target\n        setMeme(prevMeme => ({\n            ...prevMeme,\n            [name]: value\n        }))\n    }\n\n  return (\n    <main>\n    <div className=\"form\">\n        <input \n            type=\"text\"\n            placeholder=\"Top text\"\n            className=\"form--input\"\n            name=\"topText\"\n            value={meme.topText}\n            onChange={handleChange}\n        />\n        <input \n            type=\"text\"\n            placeholder=\"Bottom text\"\n            className=\"form--input\"\n            name=\"bottomText\"\n            value={meme.bottomText}\n            onChange={handleChange}\n        />\n        <button \n            className=\"form--button\"\n            onClick={getMemeImage}\n        >\n            Get a new meme image ðŸ–¼\n        </button>\n    </div>\n    <div className=\"meme\">\n        <img src={meme.randomImage} className=\"meme--image\" />\n        <h2 className=\"meme--text top\">{meme.topText}</h2>\n        <h2 className=\"meme--text bottom\">{meme.bottomText}</h2>\n    </div>\n</main>\n  )\n}\n\nexport default Form"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}